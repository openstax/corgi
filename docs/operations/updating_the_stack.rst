.. _operations-updating-the-stack:

================================
Deploying and updating the stack
================================

The entire COPS system is deployed using Docker swarm. Docker swarm provides a ``docker stack`` command that will deploy and update a set of services based on a docker-compose file. Refer to :ref:`operations-setting-up-the-swarm` to do the initial setup of the servers with swarm.

The deployment process is currently done manually (hopefully will be automated in the future) but is fairly straightforward.

The steps at a high level are:

1. Establish an SSH tunnel from ``bastion2.cnx.org`` to the AWS server.
2. Establish an SSH tunnel from your local computer to ``bastion2.cnx.org``.
3. Run the ``./script/build-push.sh`` script to build and push images to dockerhub.
4. Run the ``./script/deploy.sh`` script to deploy or update the stack.

The more granular details of the deployment are explained below.

Install docker-auto-labels
==========================

The docker-auto-labels package is used to ensure the proper labels are applied to the
docker swarm nodes. For example, the database should only be running on ``server1.cops-mvp.openstax.org``.
This is done by applying a label to that node and adding a constraint to the
docker-compose file.

Install the docker-auto-labels package:

.. code-block:: bash

   pip install docker-auto-labels

Setup the SSH tunnel
====================

* Make sure you already have an identity file to ``bastion2.cnx.org`` (e.g. at ~/.ssh/bastion2_id_rsa) as well as to ``cops.openstax.org`` (e.g. at ~/.ssh/cops.pem).

* Add lines similar to the following to your ssh config (e.g. at ~/.ssh/config):

.. code-block:: text

   Host bastion2 bastion2.cnx.org
      HostName bastion2.cnx.org
      User thomas
      IdentityFile ~/.ssh/bastion2_id_rsa
      ForwardAgent yes

   Host cops cops.openstax.org
      User ubuntu
      HostName cops.openstax.org
      IdentityFile ~/.ssh/cops.pem
      ProxyJump bastion2
      ForwardAgent yes

* Open a fresh terminal window. Keep it open until the end of the deployment process.

* Run the following command to establish an SSH tunnel to a manager node in AWS:

.. code-block:: bash

   ssh cops -NL 9999:/var/run/docker.sock

This command doesn't produce any output unless there is an error. No other commands
will be typed into this window.

Setup terminal window for communicating with docker swarm manager node
======================================================================

* Open another fresh terminal window. Keep it open until the end of the process.

* Configure docker in that terminal to use the remote host established before:

.. code-block:: bash

   export DOCKER_HOST="localhost:9999"

.. note:: All docker commands you run in this window will be like running them on the remote host. This window should only be used to run the deploy script.

Deploy to staging environment
=============================

* Ensure an ssh tunnel to cops is set up and you are in a new terminal setup to communicate with the swarm manager node by following previous steps.

* Load staging environment variables (DOMAIN, STACK_NAME, TRAEFIK_TAG):

.. code-block:: bash

   source ./script/vars.staging.sh

* Pick a tag to pin images with. Image tags are autogenerated by this `concourse pipeline <https://concourse-dev0.openstax.org/teams/Dev/pipelines/ce-image-autotag>`_. Whenever a change is made to a COPS-related repository, so you can look there for the latest successful autogenerated tag. Export the tag as an environment variable:

.. code-block:: bash

   export TAG=a-tag-of-your-choosing

* Run the deployment script, which will fail and exit without deploying if any of the required environment variables are not set:

.. code-block:: bash

   ./scripts/deploy.sh

Promote images in staging environment to production
===================================================

* Ensure an ssh tunnel to cops is set up and you are in a new terminal setup to communicate with the swarm manager node by following previous steps.

* There is no need to set any environment variables for production or pick a tag. Simply call the promotion script, which will automatically detect the tag deployed to staging and deploy it to production:
.. code-block:: bash

   ./scripts/promote-deploy.sh

Build and push new docker images
================================

* Open another fresh terminal window. Keep it open until the end of the deployment process.

* Ensure you have master checked out and the latest codez:

.. code-block:: bash

   git checkout master && git pull origin master

* Tag and upload images to dockerhub. This script builds the images with ``--no-cache`` so may take several minutes.

.. code-block:: bash

   DOMAIN=$DOMAIN TAG=$TAG ./scripts/build-push.sh

Cleanup
=======

When the deployment is complete you can close all terminal windows.

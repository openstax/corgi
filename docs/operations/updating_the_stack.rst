.. _operations-updating-the-stack:

############################
Update and Deploy COPS Stack
############################
The entire COPS system is deployed using `Docker Swarm <https://docs.docker.com/engine/swarm/>`_. The deployment process is currently done manually (hopefully will be automated in the future) but is fairly straightforward.

Docker Swarm provides a ``docker stack`` command that will deploy and update a set of services based on a docker-compose file.

Refer to :ref:`operations-setting-up-the-swarm` to do the initial setup of the servers with swarm.

After updates have been made to the Stack, the following need to happen -

********
Overview
********

Set Up SSH Tunnel
   - Set up Portforwarding to AWS by Tunneling through Bastion2. Bastion2 is the only with permission to talk to the AWS Server. Where our COPS Stack is deployed.
   - Set up Terminal for Communication with Docker Swarm Manager Node
Deploy COPS Stack to Staging
   - Deployment to Staging with newly build and tagged images to make sure new images work.
Promote COPS Stack to Production
   - Promote the COPS Stack to Production after successful deploy to Staging.
Build and Push Docker Images
   - Build, Tag, and Push updated images.

----

*************
Prerequisites
*************
1. Install `Docker Auto Labels <https://github.com/tiangolo/docker-auto-labels>`_
=================================================================================
This will ensure proper labels are applied to the docker swarm nodes.

.. code-block:: bash

   pip install docker-auto-labels

For example, the database should only be running on ``server1.cops-mvp.openstax.org``.
This is done by applying a label to that node and adding a constraint to the
docker-compose file.

2. Set up Port Forward to COPS Server (AWS) through Bastion2
============================================================

**Make sure you already have local identity files to:**

   - ``bastion2.cnx.org`` (e.g. at ~/.ssh/bastion2_id_rsa)
   - ``cops.openstax.org`` (e.g. at ~/.ssh/cops.pem).


**Configure your** ``~/.ssh/config`` **with identity files:**

.. code-block:: bash

   Host bastion2
      HostName bastion2.cnx.org
      User <user>
      IdentityFile ~/.ssh/id_rsa
      ForwardAgent yes
   Host cops
      User ubuntu
      HostName cops.openstax.org
      IdentityFile ~/.ssh/cops.pem
      ProxyJump bastion2
      ForwardAgent yes

You can copy down your ``cops.pem`` into your ``~/.ssh`` from bastion2 by:

.. code-block:: bash

   $ cd ~/.ssh/
   $ scp <user>@bastion2:~/.ssh/cops.pem .

.. note:: Example above assumes that a copy of ``cops.pem`` for  **IdentityFile** is copied to where your ssh keys are.



----

*****
Steps
*****

1. Set Up SSH Tunnel
====================

Port Forward COPS Server to Local Docker Socket
-----------------------------------------------

**In a fresh terminal window, establish an SSH tunnel to a manager node in AWS:**

.. code-block:: bash

   ssh cops -NL 9999:/var/run/docker.sock

This command doesn't produce any output unless there is an error.

**Keep terminal open until the end of the deployment process. No other commands will be typed into this window.**

Setup Terminal for Communicating with Docker Swarm Manager Node
---------------------------------------------------------------
**In a fresh terminal window, configure Docker to use the remote host (established prior):**

.. code-block:: bash

   $ export DOCKER_HOST="localhost:9999"

We will refer to this as our **Docker Talker** window. Keep terminal open until the end of the deployment process.

.. note:: This window should only be used to run the deploy script.
   All docker commands you run in this window will be like running them on the remote host.

2. Deploy to Staging
====================

Ensure SSH tunnel to COPS is set up and you are in a *new terminal* to communicate with the swarm manager node with previous steps.

Load Environment Variables
--------------------------

Load staging environment variables (DOMAIN, STACK_NAME, TRAEFIK_TAG) with script:

.. code-block:: bash

   $ source ./scripts/vars.staging.sh

Check the staging environment variables:

.. code-block:: bash

   $ env

Select Tag to Pin Images
------------------------

Docker Image Tags are autogenerated. Whenever code is merged to a COPS-related repository,
the change triggers the `ce-image-autotag concourse pipeline <https://concourse-v6.openstax.org/teams/CE/pipelines/ce-image-autotag>`_.

To Find a Tag:

   - Go to the `ce-image-autotag concourse pipeline <https://concourse-v6.openstax.org/teams/CE/pipelines/ce-image-autotag>`_.
   - Click into the 'build-and-push-images' job.
   - Click on a job number (Defaults to the latest job)
   - Click on ``report-versions-and-create-tag`` task

   You will see output similar to the following which prints out the generated tag value:

   .. code-block:: bash

      ...
      + git '--git-dir=source-code-nebuchadnezzar/.git' rev-parse --short HEAD
      + git '--git-dir=source-code-output-producer-service/.git' rev-parse --short HEAD
      + git '--git-dir=source-code-cnx-easybake/.git' rev-parse --short HEAD
      + git '--git-dir=source-code-mathify/.git' rev-parse --short HEAD
      + git '--git-dir=source-code-princexml/.git' rev-parse --short HEAD
      + git '--git-dir=source-code-output-producer-resource/.git' rev-parse --short HEAD
      + git '--git-dir=source-code-cnx-recipes/.git' describe
      + git '--git-dir=source-code-xhtml-validator/.git' rev-parse --short HEAD
      + date '+%Y%m%d.%H%M%S'
      + tag=20200612.204804
      + echo 20200612.204804
      + echo master
      + echo trunk

   .. note::

      Above Example Shows:

         - **Tag**: ``20200612.204804``

   - Copy selected Tag: ``20200612.204804``

Export Image Tag
----------------

Export image tag as staging environment variable:

.. code-block:: bash

   export TAG="tag-of-your-choosing"  ## i.e. 20200612.204804


Deploy
------

Deploy to staging using the following script:

.. code-block:: bash

   ./scripts/deploy.sh

.. warning::
   Deploy script will fail and exit without deploying if any of the required environment variables are not set.

Deploy the corresponding pipeline to ``concourse-v6``:

.. code-block:: bash

   fly -t concourse-v6 sp -p cops-pdf-staging -c <(./bakery/build pipeline pdf staging --tag $TAG)

.. warning::
   Depending upon your environment, you  may need to get the correct version of fly and login first


3. Promote Staging to Production
================================
Ensure SSH tunnel to COPS is set up and you are in a *new terminal* to communicate with the swarm manager node with previous steps.

There is no need to set any environment variables for production or pick a tag.
The promotion script will automatically detect the tag deployed to staging and deploy it to production:

.. code-block:: bash

   ./scripts/promote-deploy.sh

Deploy the corresponding pipeline to ``concourse-v6``:

.. code-block:: bash

   fly -t concourse-v6 sp -p cops-pdf-prod -c <(./bakery/build pipeline pdf prod --tag $TAG)

4. Build & Push New Docker Images
=================================

Get Latest Codez
----------------
**In a fresh terminal window, pull latest codez:**

.. code-block:: bash

   cd output-producer-service
   git checkout master && git pull origin master

Build Images with Tag and Push to Dockerhub
-------------------------------------------
**In same terminal window as above, run script:**

.. code-block:: bash

   DOMAIN=$DOMAIN TAG=$TAG ./scripts/build-push.sh

.. note:: This script builds the images with ``--no-cache`` so may take several minutes.

**Keep terminal open until the end of the deployment process.**

----

Cleanup
=======
Close all terminal windows when deployment is complete.

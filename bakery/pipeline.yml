########## This is a generated file ##########
# To generate a pipeline.yml file you
# can run 'yarn build [path/to/output-file]'
# from the 'bakery/' directory. If no path
# is specified, the output will be directed
# to stdout.
##############################################

resource_types:
  - name: output-producer
    type: docker-image
    source:
      repository: openstax/output-producer-resource
      tag: 1.1.1
resources:
  - name: cnx-recipes
    type: git
    source:
      uri: 'https://github.com/openstax/cnx-recipes.git'
  - name: output-producer
    type: output-producer
    source:
      api_root: 'https://cops.openstax.org/api'
      status_id: 1
  - name: s3
    type: s3
    source:
      bucket: ce-pdf-spike
      access_key_id: ((aws-sandbox-secret-key-id))
      secret_access_key: ((aws-sandbox-secret-access-key))
      skip_download: true
jobs:
  - name: bakery
    plan:
      - get: output-producer
        trigger: true
        version: every
      - put: output-producer
        params:
          id: output-producer/id
          status_id: 2
      - get: cnx-recipes
      - task: look up book
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: openstax/nebuchadnezzar
          inputs:
            - name: output-producer
          outputs:
            - name: book
          run:
            path: /bin/bash
            args:
              - '-cxe'
              - >-
                exec 2> >(tee book/stderr >&2)

                tail output-producer/*

                cp output-producer/id book/job_id

                cp output-producer/collection_id book/collection_id

                cp output-producer/version book/version

                cp output-producer/collection_style book/style

                cp output-producer/content_server book/server

                wget -q -O jq
                'https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64'
                && chmod +x jq

                server_name="$(cat output-producer/job.json | ./jq -r
                '.content_server.name')"

                echo -n "$(cat book/collection_id)-$(cat
                book/version)-${server_name}-$(cat book/job_id).pdf"
                >book/pdf_filename

                echo -n "https://ce-pdf-spike.s3.amazonaws.com/$(cat
                book/pdf_filename)" >book/pdf_url
      - put: output-producer
        params:
          id: output-producer/id
          status_id: 3
      - task: fetch book
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: openstax/nebuchadnezzar
          inputs:
            - name: book
          outputs:
            - name: fetched-book
          run:
            path: /bin/bash
            args:
              - '-cxe'
              - >-
                exec 2> >(tee fetched-book/stderr >&2)

                cd fetched-book

                book_dir="$(cat ../book/collection_id)"

                mkdir -p "$book_dir" ~/.config/

                server="$(cat ../book/server)"

                cat >~/.config/nebuchadnezzar.ini <<EOF

                [settings]

                [environ-$server]

                url = https://$server

                EOF

                yes | neb get -r -d "$book_dir/raw" "$(cat ../book/server)"
                "$(cat ../book/collection_id)" "$(cat ../book/version)"
      - task: assemble book
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: openstax/nebuchadnezzar
          inputs:
            - name: book
            - name: fetched-book
          outputs:
            - name: assembled-book
          run:
            path: /bin/bash
            args:
              - '-cxe'
              - |-
                exec 2> >(tee assembled-book/stderr >&2)
                cp -r fetched-book/* assembled-book
                cd assembled-book
                book_dir="../assembled-book/$(cat ../book/collection_id)"
                neb assemble "$book_dir/raw" "$book_dir"
      - task: assemble book metadata
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: openstax/output-producer-bakery
          inputs:
            - name: book
            - name: assembled-book
          outputs:
            - name: assembled-book-metadata
          run:
            path: /bin/bash
            args:
              - '-cxe'
              - >-
                exec 2> >(tee assembled-book-metadata/stderr >&2)

                collection_id="$(cat book/collection_id)"

                book_dir="assembled-book/$collection_id"

                target_dir="assembled-book-metadata/$collection_id"

                mkdir "$target_dir"

                cp "$book_dir/collection.assembled.xhtml"
                "$target_dir/collection.assembled.xhtml"

                cd "$target_dir"

                python /code/scripts/assemble-book-metadata.py
                collection.assembled.xhtml collection.assembled-metadata.json
      - task: bake book
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: openstax/cnx-easybake
          inputs:
            - name: book
            - name: assembled-book
            - name: assembled-book-metadata
            - name: cnx-recipes
          outputs:
            - name: baked-book
          run:
            path: /bin/bash
            args:
              - '-cxe'
              - >-
                exec 2> >(tee baked-book/stderr >&2)

                cp -r assembled-book/* baked-book

                collection_id="$(cat book/collection_id)"

                book_dir="baked-book/$collection_id"

                cp
                "assembled-book-metadata/$collection_id/collection.assembled-metadata.json"
                "baked-book/$collection_id/collection.baked-metadata.json"

                cnx-easybake -q "cnx-recipes/recipes/output/$(cat
                book/style).css" "$book_dir/collection.assembled.xhtml"
                "$book_dir/collection.baked.xhtml"

                style_file="cnx-recipes/styles/output/$(cat book/style)-pdf.css"

                if [ -f "$style_file" ]

                then
                  cp "$style_file" $book_dir
                  sed -i "s%<\\/head>%<link rel=\"stylesheet\" type=\"text/css\" href=\"$(basename $style_file)\" />&%" "$book_dir/collection.baked.xhtml"
                else
                  echo "Warning: Style Not Found" >baked-book/stderr
                fi
      - task: disassemble book
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: openstax/output-producer-bakery
          inputs:
            - name: book
            - name: baked-book
          outputs:
            - name: disassembled-book
          run:
            path: /bin/bash
            args:
              - '-cxe'
              - |-
                exec 2> >(tee disassembled-book/stderr >&2)
                cp -r baked-book/* disassembled-book
                book_dir="disassembled-book/$(cat book/collection_id)"
                mkdir "$book_dir/disassembled"
                python /code/scripts/disassemble-book.py "$book_dir"
      - task: jsonify book
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: openstax/output-producer-bakery
          inputs:
            - name: book
            - name: disassembled-book
          outputs:
            - name: jsonified-book
          run:
            path: /bin/bash
            args:
              - '-cxe'
              - |-
                exec 2> >(tee jsonified-book/stderr >&2)
                cp -r disassembled-book/* jsonified-book
                collection_id="$(cat book/collection_id)"
                book_dir="jsonified-book/$collection_id/disassembled"
                target_dir="jsonified-book/$collection_id/jsonified"
                mkdir "$target_dir"
                python /code/scripts/jsonify-book.py "$book_dir" "$target_dir"
      - task: mathify book
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: openstax/mathify
          inputs:
            - name: book
            - name: baked-book
          outputs:
            - name: mathified-book
          run:
            path: /bin/bash
            args:
              - '-cxe'
              - >-
                exec 2> >(tee mathified-book/stderr >&2)

                cp -r baked-book/* mathified-book

                book_dir=mathified-book/$(cat book/collection_id)

                node /src/typeset/start -i "$book_dir/collection.baked.xhtml" -o
                "$book_dir/collection.mathified.xhtml" -f svg
      - task: build pdf
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: openstax/princexml
          inputs:
            - name: book
            - name: mathified-book
          outputs:
            - name: artifacts
          run:
            user: root
            path: /bin/bash
            args:
              - '-cxe'
              - >-
                exec 2> >(tee artifacts/stderr >&2)

                book_dir="mathified-book/$(cat book/collection_id)"

                prince -v --output="artifacts/$(cat book/pdf_filename)"
                "$book_dir/collection.mathified.xhtml"
      - put: s3
        params:
          file: artifacts/*.pdf
          acl: public-read
          content_type: application/pdf
    on_success:
      put: output-producer
      params:
        id: output-producer/id
        status_id: 5
        pdf_url: book/pdf_url
    on_failure:
      put: output-producer
      params:
        id: output-producer/id
        status_id: 4
    on_abort:
      put: output-producer
      params:
        id: output-producer/id
        status_id: 4


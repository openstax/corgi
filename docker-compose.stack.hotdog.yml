version: '3.7'
services:
  backend:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      target: dev-runner
    volumes:
      - hotdog:/persist
    deploy:
      labels:
        - "traefik.http.services.${STACK_NAME}_backend.loadbalancer.server.port=80"
        - "traefik.http.routers.${STACK_NAME}_backend.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) || PathPrefix(`/openapi.json`))"
        - "traefik.http.routers.${STACK_NAME}_backend.entrypoints=http"

        - "traefik.http.services.${STACK_NAME}_hotdog.loadbalancer.server.port=3000"
        - "traefik.http.routers.${STACK_NAME}_hotdog.rule=Host(`${DOMAIN}`) && PathPrefix(`/hotdog`)"
        - "traefik.http.routers.${STACK_NAME}_hotdog.entrypoints=http"
        - "traefik.http.services.${STACK_NAME}_hotdog.middlewares=${STACK_NAME}_hotdog_stripprefix"
        - "traefik.http.middlewares.${STACK_NAME}_hotdog_stripprefix.stripprefix.prefixes=/hotdog"

        - "traefik.tags=${TRAEFIK_PUBLIC_TAG}"
        - "traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}"
        - "traefik.enable=true"
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        delay: 10s
        parallelism: 1
    environment:
      BACKEND_CORS_ORIGINS: http://localhost, http://localhost:3000
      POSTGRES_DB: corgi_hotdog
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PASSWORD: ''
      POSTGRES_SERVER: db
      POSTGRES_USER: postgres
      REVISION: ${REVISION}
      STACK_NAME: ${STACK_NAME}
      TAG: ${TAG}
      DEPLOYED_AT: ${DEPLOYED_AT}
      GITHUB_API_TOKEN: ${GITHUB_API_TOKEN}
      GITHUB_OAUTH_ID: ${GITHUB_OAUTH_ID}
      GITHUB_OAUTH_SECRET: ${GITHUB_OAUTH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      BUNDLE_PATH: /persist/bundle.json
      CORGI_REPO: https://github.com/openstax/corgi
      HOTDOG_FRONTEND_PORT: 8080
      PATH_PREFIX: /hotdog
    image: openstax/corgi-backend:${TAG}
    logging:
      options:
        awslogs-stream: "${STACK_NAME}_backend"
    command: ./bin/prestart-hotdog.sh
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK}
      - default

  db:
    deploy:
      placement:
        constraints:
        - node.labels.app-db-data == true
        - node.role == manager
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: corgi_hotdog
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PASSWORD: ''
      POSTGRES_SERVER: db
      POSTGRES_USER: postgres
      REVISION: ${REVISION}
      STACK_NAME: ${STACK_NAME}
      TAG: ${TAG}
      DEPLOYED_AT: ${DEPLOYED_AT}
      SQLALCHEMY_POOL_SIZE: 20
      SQLALCHEMY_MAX_OVERFLOW: 10
    image: postgres:12
    logging:
      options:
        awslogs-stream: "${STACK_NAME}_db"

  frontend:
    deploy:
      labels:
        - "traefik.http.services.${STACK_NAME}_frontend.loadbalancer.server.port=80"
        - "traefik.http.routers.${STACK_NAME}_frontend.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)"
        - "traefik.http.routers.${STACK_NAME}_frontend.entrypoints=http"

        - "traefik.tags=${TRAEFIK_PUBLIC_TAG}"
        - "traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}"
        - "traefik.enable=true"
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        delay: 10s
        parallelism: 1
    environment:
      DEPLOYED_IN: "hotdog"
    image: openstax/corgi-frontend:${TAG}
    logging:
      options:
        awslogs-stream: "${STACK_NAME}_frontend"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK}
      - default

volumes:
  hotdog:

networks:
  traefik-public:
    external: true
    name: traefik-public

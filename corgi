#!/usr/bin/env bash

set -eo pipefail

log() {
    echo "$@" >&2
}

die() {
    log "$@"
    exit 1
}

usage() {
    cat <<EOF
Manage your local corgi stack
Usage:

    corgi <COMMAND>

The commands are:
    start                   Alias for start-leashed
    start-dev               Start corgi in dev mode (requires oauth app, see
                            README for more details)
    start-leashed           Start corgi in leashed mode (uses mocked GitHub API)
    create-jobs [TOKEN]     Creates sample jobs with each type and status (token
                            is required in dev mode)
    build   <STACK_NAME>    Build all images in the stack           
    restart <STACK_NAME>    Restart all containers in the stack
    logs                    See logs (supports same options as docker-compose
                            logs)
    stop                    Stop corgi

EOF

    if [[ -n "$1" ]]; then
        log "$@"
    fi
    exit 1
}

COMMAND="$1"
[[ -n "$COMMAND" ]] || usage
shift


here="$(cd "$(dirname "$0")" && pwd)"
dev_stack="$here/docker-compose.stack.dev.yml"
leash_stack="$here/docker-compose.stack.leashed.yml"
readonly here
readonly dev_stack
readonly leash_stack


if [[ "$COMMAND" == "start-dev" ]]; then
    docker-compose -f "$dev_stack" up -d
    log "Hint: Remember to setup your GitHub app like in the README"
elif [[ "$COMMAND" == "start-leashed" || "$COMMAND" == "start" ]]; then
    docker-compose -f "$dev_stack" -f "$leash_stack" up -d
elif [[ "$COMMAND" == "build" || "$COMMAND" == "restart" ]]; then
    stack_name="$1"
    stacks_allowed=(dev leashed)
    is_stack_allowed=0
    for stack in "${stacks_allowed[@]}"; do
        if [[ "$stack_name" == "$stack" ]]; then
            is_stack_allowed=1
            break
        fi
    done
    if [[ $is_stack_allowed != 1 ]]; then
        die "You need to specify which stack to use (${stacks_allowed[*]})"
    fi
    if [[ "$stack_name" == "dev" ]]; then
        docker-compose -f "$dev_stack" "$COMMAND"
    elif [[ "$stack_name" == "leashed" ]]; then
        docker-compose -f "$dev_stack" -f "$leash_stack" "$COMMAND"
    fi
elif [[ "$COMMAND" == "logs" ]]; then
    docker-compose -f "$dev_stack" logs "$@"
elif [[ "$COMMAND" == "stop" ]]; then
    docker-compose -f "$dev_stack" down
elif [[ "$COMMAND" == "create-jobs" ]]; then
    # Should work in dev and leashed mode if token can be passed in
    token="${1:-fake-token}"
    docker-compose -f "$dev_stack" exec -T backend bash -e - <<BASH_EOF
python - <<PYTHON_EOF
import asyncio

from httpx import AsyncClient


async def main():
    async with AsyncClient() as client:
        response = await client.get(
            "http://localhost/api/auth/token-login",
            headers={"Authorization": "Bearer $token"},
            follow_redirects=True
        )
        if response.cookies.get("session", None) is None:
            exit("Could not get session cookie")
        created_jobs = [
            {
                "status_id": "1",
                "job_type_id": job_type_id,
                "repository": {"name": "tiny-book", "owner": "openstax"},
                "book": "book-slug1",
            }
            for job_type_id in ((3, 4, 5, 6) * 2)
        ]
        responses = await asyncio.gather(
            *[
                client.post("http://localhost/api/jobs/", json=job_args)
                for job_args in created_jobs
            ]
        )
        for response in responses:
            response.raise_for_status()
            print("Job created!")
        # I would like to update the last 5 jobs (sort by id)
        jobs = sorted((r.json() for r in responses), key=lambda j: j["id"])
        to_update = []
        # Update a job to each status (queued exists, so only do last 5)
        for i, job in enumerate(jobs[-5:]):
            # Add 1 becuase ids start at 1, add 1 again to skip queued
            status_id = i + 2
            job_id = job["id"]
            update_args = {"status_id": str(status_id)}
            if status_id == 4:
                update_args["error_message"] = "Just testing\\n1\\n2\\n3"
            elif status_id == 5:
                update_args["artifact_urls"] = [
                    {
                        "slug": job["books"][0]["slug"],
                        "url": "https://example.com/",
                    }
                ]
            to_update.append(
                client.put(
                    f"http://localhost/api/jobs/{job_id}", json=update_args
                )
            )
        for response in await asyncio.gather(*to_update):
            response.raise_for_status()
            print("Job updated!")


asyncio.run(main())
PYTHON_EOF
BASH_EOF
else
    usage "Unknown command \"$COMMAND\""
fi
